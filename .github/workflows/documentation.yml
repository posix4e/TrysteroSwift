name: Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Add permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  docs:
    name: Generate Documentation
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Build Documentation with xcodebuild
      run: |
        xcodebuild docbuild \
          -scheme TrysteroSwift \
          -destination 'generic/platform=macOS' \
          -derivedDataPath ./build
        
        # Find and extract documentation archive
        DOCC_ARCHIVE=$(find ./build -name "*.doccarchive" | head -1)
        if [ -n "$DOCC_ARCHIVE" ]; then
          echo "Found documentation archive: $DOCC_ARCHIVE"
          mkdir -p ./docs
          cp -R "$DOCC_ARCHIVE"/* ./docs/
        else
          echo "No .doccarchive found, creating basic docs structure"
          mkdir -p ./docs
          echo "<html><body><h1>TrysteroSwift Documentation</h1><p>Documentation build in progress...</p></body></html>" > ./docs/index.html
        fi
        
    - name: Setup Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v4
      
    - name: Upload documentation artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./docs
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      id: deployment
      uses: actions/deploy-pages@v4
        
  validate-readme:
    name: Validate README
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Check README links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'
        
    - name: Validate code examples in README
      run: |
        # Check if README contains Swift code blocks
        if grep -q '```swift' README.md; then
          echo "✅ Found Swift code examples in README"
        else
          echo "⚠️ No Swift code examples found in README"
        fi
        
        # Check for any broken internal links
        if grep -q "yourusername" README.md; then
          echo "❌ Found placeholder 'yourusername' in README"
          exit 1
        else
          echo "✅ No placeholder URLs found"
        fi
